Nicolas François-Bongarçon– Malek SAOUDI– Juline BUSSON

Documentation code application

Pour débuter le code, nous avons utilisé une séquence de code permettant de vérifier si un
package est installé et, dans le cas contraire, à l’installer s’il ne l’est pas. Puis avec la fonction
« librairy », nous avons chargé les packages :
if (!require(shinythemes)) {
install.packages("shinythemes")
}
library(shinythemes)
# Création du lien avec l’API pour lier faire par la suite les jointures pour le bouton reload
base<-'https://api.jcdecaux.com/vls/v1/stations?contract='
contract<-'Lyon'
key<-'&apiKey=b59e18c899829b0903cc948041c9286aecc68768'
API_URL<-paste0(base, contract, key)
#Lecture du fichier CSV contenant les informations du site Velo’V
data <- read.csv("Excel.csv")
adresse_station <-read.csv("Excel.csv")
#Début de L’Interface Utilisateur
ui <- dashboardPage(skin="red",
Afin de pourvoir donner un titre à notre tableau de bord, nous avons utilisé la fonction
dashboardHeader() :
#Titre du dashboard
dashboardHeader(title = "Vélo'v"),
Grâce à la fonction dashboardSidebar(), nous avons placé une barre latérale sur notre
tableau de bord.
De plus, la fonction sidebarMenu() a créé un menu à l’intérieur de la barre latérale qui
contient plusieurs éléments comme un bouton de recherche et un champ de texte.
La fonction menuItem() a créer un élément de menu et lorsque cet élément est sélectionné,
il bascule vers le contenu associé.
Afin de recharger et actualiser les données, nous avons utilisé la fonction actionButtom().
Enfin, la barre latérale contient un menu déroulant permettant de sélectionner une ou
plusieurs informations :
#Menus sur le côté
dashboardSidebar(
sidebarMenu(
sidebarSearchForm(textId = "searchText", buttonId = "searchButton",
label = "Search..."),
menuItem("Tableau de bord", tabName = "Dashboard", icon =
icon("dashboard")),
menuItem("Table", tabName = "Table", icon = icon("th")),
actionButton("reload_button", "Reload Data"),
selectInput("postcode_filter", "Select Postcode:",
choices = c("", unique(data$postcode)), # Use unique_postcodes
selected = "",
multiple = TRUE)
#Police du titre
dashboardBody(
#Script CSS pour le titre du dashboard
tags$head(tags$style(HTML('
.main-header .logo {
font-family: "Georgia", Times, "Times New Roman", serif;
font-weight: bold;
font-size: 24px;
}
Dans le premier menu, nous avons décidé de montrer certains indicateurs pertinents comme
le nombre de vélos disponibles et le nombre total de vélos.
Pour ces indicateurs nous avons utilisé la fonction valueBox() afin de créer une boite qui
contient les mesures que nous souhaitions afficher dans notre tableau de bord.
Nous avons ajouté différents arguments pour personnaliser le contenu de la boite comme le
titre, la couleur … :
tabItem(tabName = "Dashboard",
fluidRow(
# Nombre de vélos disponible
valueBox(
value = sum(data$available_bikes),
subtitle = "Nombre total de vélos disponibles",
width=3,
icon = icon("bicycle"),
color = "blue"
),
#Nombre total de vélos
valueBox(
value = sum(data$available_bike_stands)
subtitle = "Nombre de places disponibles",
width=3,
icon = icon("bicycle"),
color = "red" # You can adjust the color as needed
),
valueBox(
value=length(data$number),
subtitle = "Nombre de bornes",
width=3,
icon=icon("square-parking"),
color="blue"
),
valueBox(
value=nrow(data[data$status=="CLOSED",]),
subtitle = "Nombre de bornes fermés",
width=3,
icon=icon("square-parking"),
color="red"
)
Afin d’ajouter d'autres éléments à notre dashboard, nous avons utilisé la fonction fluidRow()
pour créer une rangée flexible. Dans cette partie du tableau de bord, nous avons affiché une
carte grâce à la fonction leafletoutput().
De plus, la fonction box() nous à permis de créer différentes boîtes contenant divers
éléments et grâce à la fonction plotOutput(), nous avons pu créer des sorties pour un
graphique :
fluidRow(
#Carte
box(title = "Carte", width = 6, solidHeader = TRUE, leafletOutput("map"),
color="red"),
#Top 10 stations avec le plus de vélos
box(title = "Top 10 des stations avec le plus de vélos", width = 6,
plotOutput("top_10_stations_chart")),
),
fluidRow(
box(title = "Nombre de stations à bonus", width = 4,
plotOutput("bonus_vs_no_bonus_plot")),
box(title = "Status de la station", width = 4, plotOutput("graphique2")),
box(title = "Scatter Plot", width = 4, plotOutput("scatter_plot")),
),
box(title = "Bike Stands and Available Bikes", width = 6,
plotOutput("stacked_bar_chart"))
Dans le deuxième menu et pour le premier graphique, nous avons choisi de représenter le
nombre de vélos disponibles par stations.
Nous avons alors utilisé la fonction renderPlot() permettant de générer des graphiques
interactifs. Avec le contenu de la fonction data_filtered(), nous avons filtré les données en
triant le dataframe par ordre décroissant de la fonction available_bikes en prenant les 10
premières lignes de ce tri. La fonction substr(data_filtered$name, 8,
nchar(data_filtered$name)) nous a permis de modifier les données en supprimant les 8
premiers caractères pour garder seulement le nom et non les caractères de trop.
La fonction « geom_bar » nous a servi à ajouter un graphique en barres, au « ggplot », en
utilisant les données précisées.
Enfin, pour ajouter des étiquettes aux axes et un titre au graphique, nous avons utilisé la
fonction labs() (la méthodologie et les fonctions sont les mêmes pour les autres graphiques) :
output$graphique1 <- renderPlot({
data_filtered <- data %>%
arrange(desc(available_bikes)) %>%
head(10)
data_filtered$modified_name <- substr(data_filtered$name, 8,
nchar(data_filtered$name))
ggplot(data_filtered, aes(x = modified_name, y = available_bikes)) +
geom_bar(stat = "identity") +
labs(x = "Name", y = "Available bike", title = "Nombre de vélo disponible par station")
})
# Observateur du bouton reload, lorsque le bouton sera actionné les actions suivantes
s'effectuent
observeEvent(input$reload_button, {
# Reload data from the API using the API URL
raw_data <- GET(API_URL)
updated_data <- fromJSON(rawToChar(raw_data$content), flatten = TRUE
# jointure des deux dataframe
merged_df <- bind_cols(updated_data, adresse_station %>%
select(-one_of(names(updated_data)))
)
# Mise à jour du fichier data avec la jointure
data <- updated_data
})
output$table <- renderTable({
d()
})
}
shinyApp(ui, server)
Source:
https://rstudio.github.io/shinydashboard/structure.html#sidebar-menu-items-and-tabs
